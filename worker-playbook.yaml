#
#
#   Worker Playbook
#
#   This playbook will bootstrap a k8s worker node
#
#   TODO: Check if kubeadm has already run in case the playbook needs to be run again
#   TODO: Have a wipe playbook
#
#
#
#

---
- hosts: all
  become: true
  tasks:

    #
    # Configure repositories and install Docker
    #
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependencies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        notify:
          - docker status

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker

    #
    # Turn swap off
    #
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    #
    # Install k8s utilities
    #
    - name: Add an apt signing key for k8s
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for k8s
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install k8s binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl

    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
        create: yes

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    #
    # Join the cluster
    #
    - name: Copy the join command to server location
      copy:
        src: join-command
        dest: /tmp/join-command.sh
        mode: 0777

    - name: Join the cluster
      command: sh /tmp/join-command.sh
